import{createActionURL as y,Auth as P,raw as v,skipCSRFCheck as O,isAuthAction as E}from"@auth/core";import"@auth/core/errors";import{e as m}from"./fetchEvent.mjs";import{s as b,g as T}from"./utils.mjs";import _ from"@auth/core/providers/github";import{MongoDBAdapter as D}from"@auth/mongodb-adapter";import{MongoClient as I}from"mongodb";const $="authorizationParams-";function z(e){const a=async r=>{const t=typeof e=="object"?e:await e(r);b(process.env,t),t.basePath??=T(t);const{request:o}=r,n=new URL(o.url),l=n.pathname.slice(t.basePath.length+1).split("/")[0];return E(l)&&n.pathname.startsWith(t.basePath+"/")?P(o,t):new Response("Not Found",{status:404})};return{signIn:async r=>{const{request:t}=r,o=typeof e=="object"?e:await e(r);b(process.env,o);const n=await t.formData(),{providerId:l,...c}=Object.fromEntries(n);let p={},d={};for(const i in c)i.startsWith($)?p[i.slice($.length)]=c[i]:d[i]=c[i];await L(l,d,p,o,r)},signOut:async r=>{const t=typeof e=="object"?e:await e(r);b(process.env,t);const o=Object.fromEntries(await r.request.formData());await q(o,t,r)},GET:a,POST:a}}async function L(e,a={},r,t,o){const{request:n}=o,{protocol:l}=new URL(n.url),c=new Headers(n.headers),{redirect:p=!0,redirectTo:d,...i}=a instanceof FormData?Object.fromEntries(a):a,u=d?.toString()??c.get("Referer")??"/",f=y("signin",l,c,process.env,t);if(!e){const s=`${f}?${new URLSearchParams({callbackUrl:u})}`;return p&&m(o.nativeEvent,s,302),s}let h=`${f}/${e}?${new URLSearchParams(r)}`,w;for(const s of t.providers){const{id:R}=typeof s=="function"?s():s;if(R===e){w=R;break}}if(!w){const s=`${f}?${new URLSearchParams({callbackUrl:u})}`;return p&&m(o.nativeEvent,s,302),s}w==="credentials"&&(h=h.replace("signin","callback")),c.set("Content-Type","application/x-www-form-urlencoded");const g=new URLSearchParams({...i,callbackUrl:u}),k=new Request(h,{method:"POST",headers:c,body:g}),S=await P(k,{...t,raw:v,skipCSRFCheck:O});for(const s of S?.cookies??[])o.response.headers.append("set-cookie",`${s.name}=${s.value}; Path=/; ${s.options?.httpOnly?"HttpOnly;":""} ${s.options?.secure?"Secure;":""} ${s.options?.sameSite?`SameSite=${s.options.sameSite};`:""}`);return p?m(o.nativeEvent,S.redirect,302):S.redirect}async function q(e,a,r){const{request:t}=r,{protocol:o}=new URL(t.url),n=new Headers(t.headers);n.set("Content-Type","application/x-www-form-urlencoded");const l=y("signout",o,n,process.env,a),c=e?.redirectTo??n.get("Referer")??"/",p=new URLSearchParams({callbackUrl:c}),d=new Request(l,{method:"POST",headers:n,body:p}),i=await P(d,{...a,raw:v,skipCSRFCheck:O});for(const u of i?.cookies??[])r.response.headers.append("set-cookie",`${u.name}=${u.value}; Path=/; ${u.options?.httpOnly?"HttpOnly;":""} ${u.options?.secure?"Secure;":""} ${u.options?.sameSite?`SameSite=${u.options.sameSite};`:""}`);return e?.redirect??!0?m(r.nativeEvent,i.redirect,302):i}const U=process.env.MONGODB_URI;if(!U)throw new Error('Invalid/Missing environment variable: "MONGODB_URI"');const A=new I(U),F={callbacks:{session({session:e,user:a}){return e.user&&(e.user.id=a.id),e}},adapter:D(A),providers:[_({clientId:process.env.GITHUB_ID,clientSecret:process.env.GITHUB_SECRET,allowDangerousEmailAccountLinking:!0})],debug:!1,basePath:"/api/auth"};export{z as S,F as a};
