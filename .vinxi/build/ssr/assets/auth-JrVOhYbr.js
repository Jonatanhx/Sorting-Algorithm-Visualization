import{createActionURL as _,Auth as E,raw as $,skipCSRFCheck as O,isAuthAction as A}from"@auth/core";import"@auth/core/errors";import{a as f,d as H}from"./db-Cq-AFaFn.js";import{s as T,g as I}from"./utils-BZDLBCUj.js";import k from"@auth/core/providers/github";import{PrismaAdapter as L}from"@auth/prisma-adapter";import{z as i}from"zod";const P="authorizationParams-";function V(e){const n=async t=>{const r=typeof e=="object"?e:await e(t);T(process.env,r),r.basePath??=I(r);const{request:o}=t,a=new URL(o.url),d=a.pathname.slice(r.basePath.length+1).split("/")[0];return A(d)&&a.pathname.startsWith(r.basePath+"/")?E(o,r):new Response("Not Found",{status:404})};return{signIn:async t=>{const{request:r}=t,o=typeof e=="object"?e:await e(t);T(process.env,o);const a=await r.formData(),{providerId:d,...u}=Object.fromEntries(a);let p={},m={};for(const c in u)c.startsWith(P)?p[c.slice(P.length)]=u[c]:m[c]=u[c];await D(d,m,p,o,t)},signOut:async t=>{const r=typeof e=="object"?e:await e(t);T(process.env,r);const o=Object.fromEntries(await t.request.formData());await j(o,r,t)},GET:n,POST:n}}async function D(e,n={},t,r,o){const{request:a}=o,{protocol:d}=new URL(a.url),u=new Headers(a.headers),{redirect:p=!0,redirectTo:m,...c}=n instanceof FormData?Object.fromEntries(n):n,l=m?.toString()??u.get("Referer")??"/",h=_("signin",d,u,process.env,r);if(!e){const s=`${h}?${new URLSearchParams({callbackUrl:l})}`;return p&&f(o.nativeEvent,s,302),s}let w=`${h}/${e}?${new URLSearchParams(t)}`,S;for(const s of r.providers){const{id:R}=typeof s=="function"?s():s;if(R===e){S=R;break}}if(!S){const s=`${h}?${new URLSearchParams({callbackUrl:l})}`;return p&&f(o.nativeEvent,s,302),s}S==="credentials"&&(w=w.replace("signin","callback")),u.set("Content-Type","application/x-www-form-urlencoded");const y=new URLSearchParams({...c,callbackUrl:l}),g=new Request(w,{method:"POST",headers:u,body:y}),b=await E(g,{...r,raw:$,skipCSRFCheck:O});for(const s of b?.cookies??[])o.response.headers.append("set-cookie",`${s.name}=${s.value}; Path=/; ${s.options?.httpOnly?"HttpOnly;":""} ${s.options?.secure?"Secure;":""} ${s.options?.sameSite?`SameSite=${s.options.sameSite};`:""}`);return p?f(o.nativeEvent,b.redirect,302):b.redirect}async function j(e,n,t){const{request:r}=t,{protocol:o}=new URL(r.url),a=new Headers(r.headers);a.set("Content-Type","application/x-www-form-urlencoded");const d=_("signout",o,a,process.env,n),u=e?.redirectTo??a.get("Referer")??"/",p=new URLSearchParams({callbackUrl:u}),m=new Request(d,{method:"POST",headers:a,body:p}),c=await E(m,{...n,raw:$,skipCSRFCheck:O});for(const l of c?.cookies??[])t.response.headers.append("set-cookie",`${l.name}=${l.value}; Path=/; ${l.options?.httpOnly?"HttpOnly;":""} ${l.options?.secure?"Secure;":""} ${l.options?.sameSite?`SameSite=${l.options.sameSite};`:""}`);return e?.redirect??!0?f(t.nativeEvent,c.redirect,302):c}const q=i.object({NODE_ENV:i.enum(["development","production","test"]).default("development"),GITHUB_ID:i.string(),GITHUB_SECRET:i.string(),AUTH_SECRET:i.string(),AUTH_TRUST_HOST:i.string().optional(),AUTH_URL:i.string().optional(),DATABASE_URL:i.string(),MONGO_URI:i.string()});i.object({MODE:i.enum(["development","production","test"]).default("development"),VITE_AUTH_PATH:i.string().optional()});const B=e=>Object.entries(e).map(([n,t])=>{if(t&&"_errors"in t)return`${n}: ${t._errors.join(", ")}
`}).filter(Boolean),v=q.safeParse(process.env);if(v.success===!1)throw console.error(`‚ùå Invalid environment variables:
`,...B(v.error.format())),new Error("Invalid environment variables");const U=v.data,W={callbacks:{session({session:e,user:n}){return e.user&&(e.user.id=n.id),e}},adapter:L(H),providers:[k({clientId:U.GITHUB_ID,clientSecret:U.GITHUB_SECRET,allowDangerousEmailAccountLinking:!0})],debug:!1,basePath:"/api/auth"};export{V as S,W as a};
